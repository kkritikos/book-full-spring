name: CI and Merge Workflow
run-name: Commit ${{ github.sha }} of branch ${{ github.ref}} by @${{ github.actor }}

on:
  push:
    branches-ignore:
      - master
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Compile and Test
        run: mvn clean verify

  merge-to-develop:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: develop

      - name: Set up Git user
        run: |
          git config --global user.name 'Kyriakos Kritikos'
          git config --global user.email 'domcretan@gmail.com'

      - name: Merge branch into develop
        run: |
          git fetch origin
          git checkout -b temp-branch origin/${{ github.ref_name }}
          git checkout develop
          git merge --no-ff --no-edit temp-branch
          git push origin develop

  create-release:
    needs: merge-to-develop
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: develop

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Compile
        run: mvn clean package

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.sha }}
          release_name: "Release ${{ github.sha }}"
          body: "Automatically generated release from ${{ github.sha }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload JAR to GitHub Releases
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/*.jar
          asset_name: my-app.jar
          asset_content_type: application/java-archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
